<!-- Chart.js Samples -->
<script>
    (function(){
        'use strict';

        Charts.init()

        var Performance = function(id, type = 'line', options = {}) {
            options = Chart.helpers.merge({
                scales: {
                    yAxes: [{
                        ticks: {
                            callback: function(a) {
                                if (!(a % 10))
                                    return a + "€"
                            }
                        }
                    }]
                },
                tooltips: {
                    callbacks: {
                        label: function(a, e) {
                            var t = e.datasets[a.datasetIndex].label || "",
                                o = a.yLabel,
                                r = "";
                            return 1 < e.datasets.length && (r += '<span class="popover-body-label mr-auto">' + t + "</span>"), r += '<span class="popover-body-value">' + o + "€</span>"
                        }
                    }
                }
            }, options)

            var data = {
                labels: ["Jan", "Fev", "Mar", "Avr", "Mai", "Jui"],
                datasets: [{
                    label: "Performance",
                    data: [<%= get_calendar_turnover(@paid_invoices, "01") %>,
                        <%= get_calendar_turnover(@paid_invoices, "02") %>,
                        <%= get_calendar_turnover(@paid_invoices, "03") %>,
                        <%= get_calendar_turnover(@paid_invoices, "04") %>,
                        <%= get_calendar_turnover(@paid_invoices, "05") %>,
                        <%= get_calendar_turnover(@paid_invoices, "06") %>]
                }]
            }

            Charts.create(id, type, options, data)
        }

        var Orders = function(id, type = 'roundedBar', options = {}) {
            options = Chart.helpers.merge({
                barRoundness: 1.2,
                scales: {
                    yAxes: [{
                        ticks: {
                            callback: function(a) {
                                if (!(a % 10))
                                    return a + "€"
                            }
                        }
                    }]
                },
                tooltips: {
                    callbacks: {
                        label: function(a, e) {
                            var t = e.datasets[a.datasetIndex].label || "",
                                o = a.yLabel,
                                r = "";
                            return 1 < e.datasets.length && (r += '<span class="popover-body-label mr-auto">' + t + "</span>"), r += '<span class="popover-body-value">' + o + "k€</span>"
                        }
                    }
                }
            }, options)

            var data = {
                labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                datasets: [{
                    label: "Sales",
                    data: [6, 20, 30, 22, 17, 10, 18, 26, 28, 26, 20, 32]
                }]
            }

            Charts.create(id, type, options, data)
        }

        var Devices = function(id, type = 'doughnut', options = {}) {
            options = Chart.helpers.merge({
                tooltips: {
                    callbacks: {
                        title: function(a, e) {
                            return e.labels[a[0].index]
                        },
                        label: function(a, e) {
                            var t = "";
                            return t += '<span class="popover-body-value">' + e.datasets[0].data[a.index] + "</span>"
                        }
                    }
                }
            }, options)

            var data = {
                labels: ["Devis", "Factures payées", "Factures non-payées"],
                datasets: [{
                    data: [<%= current_user.quotes.where(is_invoice: false).count %>, <%= current_user.quotes.where(is_invoice: true, is_paid: true).count %>, <%= current_user.quotes.where(is_invoice: true, is_paid: false).count %>],
                    backgroundColor: [settings.colors.primary[400], settings.colors.success[400], settings.colors.danger[400]],
                    hoverBorderColor: "dark" == settings.charts.colorScheme ? settings.colors.gray[800] : settings.colors.white
                }]
            }

            Charts.create(id, type, options, data)
        }

        ///////////////////
        // Create Charts //
        ///////////////////

        Performance('#performanceChart')

        Performance('#performanceAreaChart', 'line', {
            elements: {
                line: {
                    fill: 'start',
                    backgroundColor: settings.charts.colors.area
                }
            }
        })

        Orders('#ordersChart')

        Orders('#ordersChartSwitch')

        Devices('#devicesChart')

        $('[data-toggle="chart"]:checked').each(function (index, el) {
            Charts.add($(el))
        })

    })()
</script>
